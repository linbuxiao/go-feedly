// Code generated by go-swagger; DO NOT EDIT.

package boards

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new boards API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for boards API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetBoards(params *GetBoardsParams, opts ...ClientOption) (*GetBoardsOK, error)

	PostBoards(params *PostBoardsParams, opts ...ClientOption) (*PostBoardsOK, error)

	PostBoardsTagID(params *PostBoardsTagIDParams, opts ...ClientOption) (*PostBoardsTagIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetBoards get boards API
*/
func (a *Client) GetBoards(params *GetBoardsParams, opts ...ClientOption) (*GetBoardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBoardsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBoards",
		Method:             "GET",
		PathPattern:        "/boards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBoardsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBoardsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBoards: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostBoards post boards API
*/
func (a *Client) PostBoards(params *PostBoardsParams, opts ...ClientOption) (*PostBoardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostBoardsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostBoards",
		Method:             "POST",
		PathPattern:        "/boards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostBoardsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostBoardsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostBoards: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostBoardsTagID post boards tag ID API
*/
func (a *Client) PostBoardsTagID(params *PostBoardsTagIDParams, opts ...ClientOption) (*PostBoardsTagIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostBoardsTagIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostBoardsTagID",
		Method:             "POST",
		PathPattern:        "/boards/{tagId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostBoardsTagIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostBoardsTagIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostBoardsTagID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
