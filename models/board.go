// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Board board
//
// swagger:model Board
type Board struct {

	// cover
	Cover string `json:"cover,omitempty"`

	// created
	// Required: true
	Created *int64 `json:"created"`

	// customizable
	// Required: true
	Customizable *bool `json:"customizable"`

	// description
	Description string `json:"description,omitempty"`

	// enterprise
	// Required: true
	Enterprise *bool `json:"enterprise"`

	// html Url
	HTMLURL string `json:"htmlUrl,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// is public
	IsPublic bool `json:"isPublic,omitempty"`

	// label
	// Required: true
	Label *string `json:"label"`

	// show highlights
	ShowHighlights bool `json:"showHighlights,omitempty"`

	// show notes
	ShowNotes bool `json:"showNotes,omitempty"`

	// stream Id
	StreamID string `json:"streamId,omitempty"`
}

// Validate validates this board
func (m *Board) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomizable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnterprise(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Board) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", m.Created); err != nil {
		return err
	}

	return nil
}

func (m *Board) validateCustomizable(formats strfmt.Registry) error {

	if err := validate.Required("customizable", "body", m.Customizable); err != nil {
		return err
	}

	return nil
}

func (m *Board) validateEnterprise(formats strfmt.Registry) error {

	if err := validate.Required("enterprise", "body", m.Enterprise); err != nil {
		return err
	}

	return nil
}

func (m *Board) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Board) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this board based on context it is used
func (m *Board) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Board) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Board) UnmarshalBinary(b []byte) error {
	var res Board
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
