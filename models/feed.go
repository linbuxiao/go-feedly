// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Feed feed
//
// swagger:model Feed
type Feed struct {

	// added
	// Required: true
	Added *int64 `json:"added"`

	// categories
	// Required: true
	Categories []*FeedCategory `json:"categories"`

	// id
	// Required: true
	ID *string `json:"id"`

	// num long read entries past month
	// Required: true
	NumLongReadEntriesPastMonth *int64 `json:"numLongReadEntriesPastMonth"`

	// num read entries past month
	// Required: true
	NumReadEntriesPastMonth *int64 `json:"numReadEntriesPastMonth"`

	// num tagged entries past month
	// Required: true
	NumTaggedEntriesPastMonth *int64 `json:"numTaggedEntriesPastMonth"`

	// title
	// Required: true
	Title *string `json:"title"`

	// total reading time past month
	// Required: true
	TotalReadingTimePastMonth *int64 `json:"totalReadingTimePastMonth"`

	// updated
	// Required: true
	Updated *int64 `json:"updated"`

	// velocity
	// Required: true
	Velocity *float64 `json:"velocity"`

	// visual Url
	VisualURL string `json:"visualUrl,omitempty"`

	// website
	Website string `json:"website,omitempty"`
}

// Validate validates this feed
func (m *Feed) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumLongReadEntriesPastMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumReadEntriesPastMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumTaggedEntriesPastMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalReadingTimePastMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVelocity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Feed) validateAdded(formats strfmt.Registry) error {

	if err := validate.Required("added", "body", m.Added); err != nil {
		return err
	}

	return nil
}

func (m *Feed) validateCategories(formats strfmt.Registry) error {

	if err := validate.Required("categories", "body", m.Categories); err != nil {
		return err
	}

	for i := 0; i < len(m.Categories); i++ {
		if swag.IsZero(m.Categories[i]) { // not required
			continue
		}

		if m.Categories[i] != nil {
			if err := m.Categories[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("categories" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("categories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Feed) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Feed) validateNumLongReadEntriesPastMonth(formats strfmt.Registry) error {

	if err := validate.Required("numLongReadEntriesPastMonth", "body", m.NumLongReadEntriesPastMonth); err != nil {
		return err
	}

	return nil
}

func (m *Feed) validateNumReadEntriesPastMonth(formats strfmt.Registry) error {

	if err := validate.Required("numReadEntriesPastMonth", "body", m.NumReadEntriesPastMonth); err != nil {
		return err
	}

	return nil
}

func (m *Feed) validateNumTaggedEntriesPastMonth(formats strfmt.Registry) error {

	if err := validate.Required("numTaggedEntriesPastMonth", "body", m.NumTaggedEntriesPastMonth); err != nil {
		return err
	}

	return nil
}

func (m *Feed) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

func (m *Feed) validateTotalReadingTimePastMonth(formats strfmt.Registry) error {

	if err := validate.Required("totalReadingTimePastMonth", "body", m.TotalReadingTimePastMonth); err != nil {
		return err
	}

	return nil
}

func (m *Feed) validateUpdated(formats strfmt.Registry) error {

	if err := validate.Required("updated", "body", m.Updated); err != nil {
		return err
	}

	return nil
}

func (m *Feed) validateVelocity(formats strfmt.Registry) error {

	if err := validate.Required("velocity", "body", m.Velocity); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this feed based on the context it is used
func (m *Feed) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCategories(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Feed) contextValidateCategories(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Categories); i++ {

		if m.Categories[i] != nil {
			if err := m.Categories[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("categories" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("categories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Feed) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Feed) UnmarshalBinary(b []byte) error {
	var res Feed
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
